import hashlib
import time

class Block:
    def __init__(self, index, previous_hash, timestamp, data, nonce=0):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.data = data
        self.nonce = nonce
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        value = f"{self.index}{self.previous_hash}{self.timestamp}{self.data}{self.nonce}"
        return hashlib.sha256(value.encode()).hexdigest()

    def __str__(self):
        return f"Block<index={self.index}, hash={self.hash[:10]}...>"

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
        self.difficulty = 4

    def create_genesis_block(self):
        return Block(0, "0", time.time(), "Genesis Block")

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, data):
        prev_block = self.get_latest_block()
        new_block = Block(
            prev_block.index + 1,
            prev_block.hash,
            time.time(),
            data
        )
        self.proof_of_work(new_block)
        self.chain.append(new_block)

    def proof_of_work(self, block):
        target = "0" * self.difficulty
        while block.hash[:self.difficulty] != target:
            block.nonce += 1
            block.hash = block.calculate_hash()

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            prev = self.chain[i - 1]
            curr = self.chain[i]
            if curr.hash != curr.calculate_hash():
                return False
            if curr.previous_hash != prev.hash:
                return False
        return True

if __name__ == "__main__":
    bc = Blockchain()
    print("Mining block 1...")
    bc.add_block("First transaction data")
    print("Mining block 2...")
    bc.add_block("Second transaction data")

    for block in bc.chain:
        print(f"Block #{block.index}: {block.hash}")
    print("Blockchain valid?", bc.is_chain_valid())
